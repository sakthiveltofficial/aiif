/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export function Drone(props) {
  const { nodes, materials } = useGLTF('/static/drone1.glb')

  const groupRef = useRef()
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const [isVisible, setIsVisible] = useState(false)
  
  // Track mouse position
  useEffect(() => {
    const handleMouseMove = (event) => {
      // Convert mouse position to normalized coordinates (-1 to 1)
      const x = (event.clientX / window.innerWidth) * 2 - 1
      const y = -(event.clientY / window.innerHeight) * 2 + 1
      setMousePosition({ x, y })
    }

    window.addEventListener('mousemove', handleMouseMove)
    return () => window.removeEventListener('mousemove', handleMouseMove)
  }, [])

  // Trigger fade-in animation
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(true)
    }, 200) // Start animation after 200ms

    return () => clearTimeout(timer)
  }, [])

    // Animate drone rotation to look at cursor
  useFrame(() => {
    if (groupRef.current) {
      // Handle fade-in animation
      if (!isVisible) {
        groupRef.current.position.y = -50 // Start from below
        groupRef.current.visible = false
        return
      }

      // Fade-in animation
      if (groupRef.current.position.y < 0) {
        groupRef.current.position.y += 1 // Move up smoothly
        groupRef.current.visible = true
      }

      // Calculate the target rotation based on mouse position
      // Adjusted for the new drone position and camera setup
      const targetRotationY = mousePosition.x * Math.PI * 0.2 // Reduced for better control
      const targetRotationX = mousePosition.y * Math.PI * -0.23265 // Increased by 30% from 0.05 to 0.065
      
      // Apply rotation to the inner group that contains the drone meshes
      // This accounts for the existing rotation of [0.1731, 0, 0]
      const innerGroup = groupRef.current.children[0]
      if (innerGroup) {
        // Smoothly interpolate the rotation with faster response
        innerGroup.rotation.y += (targetRotationY - innerGroup.rotation.y) * 0.08
        innerGroup.rotation.x += (targetRotationX - innerGroup.rotation.x) * 0.06
        
        // Rotate fan blades
        innerGroup.children.forEach((child) => {
          if (child.userData?.isFan) {
            child.rotation.y += 0.30 // You can change this to .x or .z as needed
          }
        })
      }
    }
  })

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group position={[-4.647, -22.031, -122.463]} rotation={[0.2731, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Camera7_CGAXR_MC_Drone_Low.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Back_Light.geometry}
          material={materials.Frosted_GlassSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Body.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Botom_0.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_10.geometry}
          material={materials.car_paint_Base_colorSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_11.geometry}
          material={materials.CarRimSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_117.geometry}
          material={materials.Glas_refSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_118.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_12.geometry}
          material={materials.CarRimSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_13.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_14.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_20.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_37.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_38.geometry}
          material={materials.Glas_refSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_43.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_9.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera.geometry}
          material={materials.CarRimSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera1.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera10.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera11.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera12.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera13.geometry}
          material={materials.car_paint_Base_colorSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera14.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera2.geometry}
          material={materials.car_paint_Base_colorSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera3.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera4.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera6.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera8.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Drone_Camera9.geometry}
          material={materials.car_paint_Base_colorSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Fan.geometry}
          material={materials.RubberSG}
          position={[31.307, 46.467, 31.303]}
          ref={(el) => {
            if (el) {
              el.userData.isFan = true
            }
          }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Fan1.geometry}
          material={materials.RubberSG}
          position={[-31.306, 46.435, 31.303]}
          ref={(el) => {
            if (el) {
              el.userData.isFan = true
            }
          }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Fan2.geometry}
          material={materials.RubberSG}
          position={[-31.306, 46.467, -31.303]}
          ref={(el) => {
            if (el) {
              el.userData.isFan = true
            }
          }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Fan3.geometry}
          material={materials.RubberSG}
          position={[31.307, 46.467, -31.303]}
          ref={(el) => {
            if (el) {
              el.userData.isFan = true
            }
          }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Fan_top.geometry}
          material={materials.RubberSG}
          ref={(el) => {
            if (el) {
              el.userData.isFan = true
            }
          }}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Light_0.geometry}
          material={materials.Frosted_GlassSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Logo_bass.geometry}
          material={materials['Material.001']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Moter.geometry}
          material={materials.CarRimSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Moter_Coil.geometry}
          material={materials.AluminiumSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Shockabsorber4.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Stand.geometry}
          material={materials.RubberSG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CGAXR_MC_Drone_Low_CGAXR_MC_Top_light.geometry}
          material={materials.car_paint_Base_colorSG}
        />
      </group>
    </group>
   
  )
}

useGLTF.preload('/static/drone1.glb')



